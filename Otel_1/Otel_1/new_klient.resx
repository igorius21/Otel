<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQCsAAAEAGADAIQAAFgAAACgAAABAAAAAVgAAAAEAGAAAAAAAAAAAAFoAAABaAAAAAAAAAAAA
        AAAnEiQmEiMsEiMoECIUEB8QDyARDiASDyQSECcSDyQUECUYEicXEikaEyscFC4dFS8fFzEhGTkoHTgo
        HDYyJD4xJD42KkQ5MEs+NVFFPllLRl5OS2JSUGZWVWtZV2xdWm1hYXN0d4WUm6O2vcOkrbSAiJaElKeq
        wNOrvc19h5pgXHZYTWhTSGdNRmlLS3RKVoJLYI04VYQ8VoZFNEwrKD0mKU0lKEwjKEsiKE0hJkoiJkgg
        JUcfJEUgJEghJUYZH0AQDBYRDhsTECATESQRESQPECMNDiEJDBwEBg8DBQwMCREICQ0GCA4IChUHCRAI
        CA4LCg8NCxQPESYXEBoiFB0WDxkZERonGSYyIDI4Jz1BMUpIPVZPS2RaXXNncIJ7hZGMmJ+fqq6/yMnb
        4eC9xcaPlpyYoq3D0Nq4wsuCg5NpXnNhT2daSWRVSWhQTHFNW4Vce6ZOcJ44U4FETHY4JzwrKEwnJUgi
        IkcdI0oYGzoSEiYLDR0NChgMChUVHCsSDxoaECIcECIcESIdESMfEygfFS0gFzQJCxsDBg4EBxEMCxYG
        CAkGCRIHDBkIChQIChQMChURChYTDRsTEikfEhsVDhYWEhobEh4pGCsrGzQsHDovIEUzJ1Q2LVo4MV06
        NF0/OmFEQ2VPTWpYTF9YTmBRVGRueo+Ukaide5F8ZXpsUmVtSmBlRF1fQ11bSmpbXoZ7nsR4msNRWoY/
        TnhJMlRDJk4zID0ZFigWFy4ZHD4PDlQODlEJB2cLC0AYJD0UGCseFTYfFzshGT4iGkIkHEclHUknHk0W
        FDIPDBoJCRUIBgsHBwoICxUHCxMHChIHChEHCxEODRMQDRMRDBggFzETDxUXEBgiFSMqGSoyIDQxHTcj
        FCdFKU84Hj85IkBCKkdQNVVSO1djU2uonqeGeYJfZICKlqnk4+nh0ditorZ8aX1mSl5hRFpfRFtNRmlU
        XHx8kKyPlrRqXIBPQV9JOlw5PWYkMF8fO4ktOnhGRIMSDHMOCnIJBnEJBmEOESQSFSUQDhscESMkFCsZ
        FCsZFCYZFSsjGjUtHj8iGTQiFiwgFCgdGDEdEyQaDxMKCRALCg0NCw8PCg4OChALChMgGTIYExcaFx4g
        HCgjHS03LEQmHzhCIEglGFAtGmNjM0h7NUN3NkZ/P1V7UFuupKyMhIxqYW6Rl6Pg5efi4uGzuMeBf5Nb
        UWtWTGhXTmtWaaVWZ5OovtW7w9VsZYVPR2RGP15RQmJGQnozT5QwSpJAJm0oDmkgE00cFlcMB2cLCGIL
        B1EMCxIZDhklEiETEygXDhkSEhwkFSc2HTYxGS8sEiQbEiUnMWwvJE8qHEY4IC8ZERYZEhsRCw4PCg8K
        DBgkHEMfFB4mGSYyKz0uI0QuIVYpJGQrI1QoHlFBKVQ6M1hBMERLMkdWPVRlTlxqU2BoZoBkWWJvaW6G
        hYeQh4inlY1raoNPSWFORV1IR2FUSmxuXm+bprWfs8l4gpVub4JeY3hWV3BRO11iRG1vUHNuPmlRO2dG
        LGU+KmNCH0Y1F0coElANDRQcER4sFicTGjsYEiEPEx0jFik3ITpNME5GIDkcFi0oL2g6LV1ERH9CR4M6
        PmYhHTYgGCUdFiUlGzAsJk4rJkctKV9BOolFVpw1NJ0bG7NDQ6Y1PGY6KUw3QG4/Snc5P2E+Rl5JXXJc
        bIFPX3ljeI12ipyNk51vcodzb4haXHpQVn5LTnVGUHlLVX+WgJ2ceoZ9fY/Cu7rHw8KtkJChiol4Q0l6
        c4hnV3WASHFqO1yAQFc7K0oqHi0wGiNEGz0TGyMhFCMqFSYUGTYYEyATGyUjGCsxIDw/L1I2JUUbGTAh
        J1M6LVdGS4MtYZtIcaw4Rnk0OmUrMFwtLVxPMDUiJ04sLnNdUsxJYcI2SL5Gjt0sP68eH1I2KEkxNVVD
        TG1VVnFld4eDl6OQsr+WrryArMGTxNS/3+Z8orZdbXxMWGZHRlNQZnePqLxbZYTFu7/Hsa+ajpmYkpmg
        jo+urql9d4CeZF90dX1FdI9qg5w6eZmBi5k2VGw8VXdkbYVXQVQSHCUkFiUwGywYIUIeFykZGiUhGCkn
        HToxKFEpHT0bFyoeFB86JUNCUIseYZhCeKs7U3xDT2kvQ2svRm03R3g9RHhER389VJA3XppiepUqNHlV
        OX5KT3c/ME86L0NGQUy2s6bp7NX8/f1tg41leohNX3NSa4RVbX1QY3NDQ0xCO0JFOkBARUxBcnxEa3hs
        eoN4hYt/iY6CipCGj5SJkpaNkZNxZIBwdY1uhJRceo13kqZ8ma92lKcuPl4pR1tJQEkPEBclHSg1JzYV
        IEMfFSUWERwmFy0sIT8wJlMoGjcdFSciFyY8LlNNYZ4xZJ00b4gubG86c3tDeYYzcHEzcncyeoUscGqJ
        1L2t1cqcoqBUb5qacZ2PobdHOFhDMkhEMj9rcHmIlJabpq1qX2piTFxfRldhS15cRFNdRFJQN0BIN0FK
        OT5TX3Jec4tXYHhVaIFTXHFPXnRKWW1HWW1FVmpCVGk9UmY5U2g0TmQvUGcrT2soV3MiUmgvXm47SlRW
        SU0ODRYjGSYyHi4UH0IhFicWFCArHTQsJEIxJ1UnGjYeFicjGy9ALk5aa6RHYJkxUYAzR2N7cH2OhpBp
        bHhHPlRRQlgvOk8sQUilqbHg4+SswtWnh6Gtw9NmYYRXQ1ZTPUpWRFtXQlmAVFqlbWGmcXCnc3ebZW5s
        QVVvQ1d7QlV2QlJrPUBxb3Nyh41jZXtXco9RYH9KaYdCYX8/aYZFd5VCYoBAcJE/SVM9PkY7O0s1OUw1
        Ok8zN0xALzZcTUlrXloQDRkmFiowGC0UGy8gGC8UEh8kIkYlKFAvKlgnGzcdFy0WEzc7MldbhrMcS5cK
        OY01OHA9Kz46KDwzMVA1Pl9COlQ4OFMuNkxZXXVZZHpMWYeBRVqst8WdmKOnm5q1qaKCQ2tzNV5+OmeM
        PWGQOFOYPVCXSVeEOFCRO0+2XmG9ZmTLcGHHlHTavKa0aWV0RVKFLk9nO1JlQFRidW2MioF5TVRtTlVt
        fXNmbmpcUV9KS109RFZVQT9sWVBzY1ZwXlQWEyMnFSkxFysUGjAhGC0UDxopHDklH0MoKVUiGjQuHzkm
        JFNTV4BmpsdGgq4wZ5o+TXM7KDk/Jzw1L0wzME5FQ1xGQmkvNE1CRWJEO15PRHKFJDebjpGij42umZG8
        qJmxLHyMIl+4GHe0KoKbH2DDL4SQJFC1TYSiKl6jL16mP2iaLEmiUWWgS1SiRlR9NEqiFUuCKEd6K0Jz
        Sk6rcWmtaV62d2W8oIfNj3bOq3eYjHl/kYOIdGCKdFuGb1iCalUWDSErFiw2Fy0QFysVESEQEB4zHTg7
        KVBOO2hqSHR5UYBmUopxgK5/xNur2t7I8PB4rasnJEElJkxEKVk6K0c/MUtGPmUwLko9NFdITGtSP2aB
        KTahjIiji3+tk4PKr5ewFWuDJ3GqH3urFXOYGly7EGWPH1G5KH6oGGKtGWe1KIebLmu7G3WXHEq9P4OK
        MlSrD1CtGmGZGUuhI2KhJ2CEH0K5PXhlNDiELkCjhWOWgGZ6Y0iMc1aQc1WMb1GJa08PDhwsGDE9JEVS
        OGBlQnF7TH+PVIaQWY2gY5WVYpeJYJiCYJl1YZlpbaBlf6xOUWs6LD05KD88JT08K0c3KEFBOk5HPWMt
        K0M6MExLTWRWPGCGIiqpjoG/pIi5mIPJq42eHnB4eryXXLCXHnCLHFWrFVp+I0uyEmidF1ClFVisEl6Y
        GU6sEl2PGUi3D2WINlWsDk2kC0WXFkmbMnSaD06CHEDBCWteKDWBJT+piF2lhFqhf1ade1OYd1CVck2R
        bkuHSXlpQnp7SoCMT4GKUYZ8T4aLVopoS4dzToVnTIdjT4xhUZBiUpFbVpNWVoROP1E+JDU8IzFBIzQ2
        KEI4K0g8LUJIPF8vLUE7L0hCPVlaOlqLISepiXjGpoG1knrJpoSNK29aVZ2JQZCFJ2V4JlabHlxtJkei
        E1yLGUeUGlOWF1iJG0WWGE+BHEKmEVR+NlKnE06SEUCPEj6FEkOOEEV6Fzi4B1lYJTN6IjyrhVaoglOl
        flChe06ed0qac0eXb0V6Rnt8SH58Sn53Sn5uRXtlRH1jR4BjSYVmT41hTYpbR4BROWZPNFc7Izg/JzhI
        LEVBIDg6IC1CJTo4KUI4JDc/LT9MPFsvKDo8LERDNFFYOFiVGSSqhHHLpnq5k3LHn3iAKlhiK2FwM2B6
        KlhxKlGMJ09nJD+RHlR/H0OJHkuEHkx7IEOBI0hwI0SLIF92O1GjE0uEEzuDFUN0GkmEEUFjIT+mCVFR
        JTF3Hzeqf0yofUulekmid0WfdESccEGYbT9eO3FfPXRgQHhjQ3tySoR9UIdmSoJWPWxCK0tAKURDIzUx
        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
        XyerZiesZSerZiWrZSWsZSWqZiWqZSasZCapZCapZCapYyeoXCirDUx+ETWfCT+SCDN/DjiVDDphDyOS
        CT6CCjB6EDRsFC9kFCloGS1dFCduFy5ZHCuSCzdoEDFmHDtRHjpTFSJNER1oGC4/Gh52DzCcUh2cUhyb
        UByaTxyZTRyXTBuVSxqhXCKfXSMvHBkvHSIuGhxDICkqFhpJHiM1FBVCGh5IHCFMGhtbHiFhGxp5JyGu
        TUGLOSWmYD6qYyapYySqYySqYySpYySqYySpYiOqYiSpYiOpYiOpYSSpYSSpYCSnWiW2BE6SBCyvBkaj
        BTWICzWpCEBsDSSaCkSICjR/DjN0ETBoEy5yGUNiESd4EDBkLj6WCDN1BytsFTpgDyVZESNQEB1yFDI7
        Hid0DzCbUBybTxuaThuZTBuYTBqWShqVSBmfWiGfWyExHRowHSAvGhtFHSMuERJRJjFCGx5RGx5fHyFr
        IR+QMip5Ih+hWzqkVCSpYCOoYCSoYCSoYSKoYSOoYCSoYCOoXyGoYCOoXyGnYCKoXyKoXyOoXyKoXiOl
        WSOwJluIBim9BlatAjubBDS/CFaACSaxCE6WDDyICjSCCTNuFDKIF0xrDSmECjNnJTuXBjR6BChzCipq
        CiZjDCRaDR6DCjU9GRt0Dy2ZThqZTRmZTBmYSxmWSRiVRxiTRhifVx+eWCA5HRc2HB0xGhxNJC85JTZi
        ISNcFxR4JyKSMzCBNierVzycVSCnXiKnXiKnXiKnXiGnXyOnXiGmXiKnXiCnXiGnXiKmXR+mXSCnXiKm
        XSCmXSGmXSGmXCGlWyGpWCWaRh+nN0OoHk2aBjTDPXKOBCW1EFyiBC6UCjaOBjV2CymXBjdxCymPCDZn
        Fy+ZBTKHBC12CSlwCCdrCSRkCx+IBjZBGh5zEC2ZTBmYSxmXShmWSRiVRxiTRheRRBaeVh2dVx5HHBZI
        HBs2GhthISFYFBCUKhuDHhunYEqFNSGhViOlWyClXB+lXCClXCClXCClXCClXCClXCCmXCClXB+mXSGl
        XCClXCClXCClWx+kWx+lWyCkWx+kWh+jWh+jWh+kWB6kVx+rUyiXOCC5RV6GByS7PnWpCEWlBUCdAjiC
        CCukBThyCiedBjp1HjmhBjOhBDmGBy16BSlzByRoCB+PBDdBFxt5EDOXShiWSRiVSBeURxaTRRaRRBaQ
        QhWcUxydVB2QQzqMLyNLHBueNSZvFhPFZz+IPBimViGgVx2iWR6iWR6jWh6jWh6jWh6jWh6jWh6jWh6j
        Wh6jWh6jWh6jWh6jWh6jWh6jWh6jWh6jWh6iWR6iWR2iWB6iWB6hVx2jVh2iVh6iVR2jVR2lUx6hSB2i
        PDmeJUObFkWqA0eMByyzAUB9BiaqA0N3EDCnBDGqAkCQBC+JAyx6Gj53BySiAz9DFxt5EC+VSBiVSBeU
        RhaSRBWRQxSQQRWOPxSbUBydURydUBy0XEFTGhnGa06DPC2iVBygVhygVh2hVh2hVh2hWByhWByhVx2h
        WByhWB2hWByiWR2iWB6iWR2hWB2iWByhWByhWByhWByhWByhWByhVx2hWBygVhygVhyhVRyhVRuhVByh
        VBygVBygUxygUxuiURqnUiOXPB6vOk97DSG5EGF/BiS0AlKDCi6iAy+rD1mYBS+YAjKKAyWEAyKqBkZK
        Fxx+Dy2URheTRRaSRBSRQxSQQBSOQBOMPRKaThqbTxqcUBudURyORzOeUhyeUxueUxyfVByfVRufVByf
        VRufVRugVRygVhyhVhygVhugVhugVhygVhugVxygVhygVxugVhygVhugVhugVRygVhufVRuhVBugVBuf
        VBygUxugUxufUhqfUhufUhyfUhufUBqgUBugUBqfThqhThqYRxqqPzp0FhquImWAHT2XCSuOLEF7DR+Z
        EEWVDDWNBCayB1lLFRlnKRKURBWSQxSQQhSPQRKOPxSMPRKKPBKYTBiZTRiaThmbTxqcUBudUBqcURmd
        URqeUhqdUxqdUxqeUxqeUxugUxueUxqfVBqeVBqgVBqfVBufVRqhVBugVBqeVBugUxugVBqgUxqgUxqg
        UxqgUxqgUxqfUhqfUhqfURqfURmeURqeUBqeUBqeTxqeTxqeThmdThmeTRmdTBmdTBmeTBiaSRinQid/
        Kh6QOSCURBqTQhulQyiKJx+IESeyN2tKGReKQBOSQhOPQROOQBKNPhOMPRKLOxGJOhGWSheYSxiYTBiZ
        TRiZThiaThmaThmbUBicUBmbUBmdUBmdUBmeURmeURmeURmeURmeURmfUhmdUxqfUhqeUxmfUhmfURmf
        UhmeUhmeURmeURmeURmeURmeURmeUBmdUBidUBmdTxmcTxicTxicThmcThicThmbTBibTBibTBiaSxic
        SxeZShebSxaaSReZSBiZSBWXSBeYRhWXRhaXRBWbQReXNiFyMBqSQRORQBKQPxKNPxGMPRGKPBCJOhGH
        OBGVRxeWSRiXShiXTBeYTBeYTBiZTRibTRiaThiaThmaTxicThmcTxicTxmcTxmdTxidTxmdUBicURie
        URmeUBicURmdUBidUBidUBmdTxidTxmdTxicThidThicTxecThicThibTRibTRicTBibTBeaTBebSxia
        SxiZSxiZSheaShaaSRaYSRaYSBeYSBaWRxaWRxaWRRWXRRWVRBWUQxSVQhSTQRSSQROQQBKOQBKNPhKL
        PRCKOxCJORGGOBCENg+TRRaURxaVSBaWSRiWSheXSxeYSxeYTBeaSxeaSxiaTBibTReaTRebTRibTRia
        TRicTRabThebThibVB6bUhqbUBecThibThecThicThebThebTRicTRebTReaTRaaTBeaTBebTBebSxaa
        SxeZSxeZSxeZSxeaShaZSRaZSBaXSBWXSBaWRxaXRxaVRhWWRRWVRRSVRBSTQxOSQxSTQRORQRKQQBKQ
        PxKPPhGMPRGLPBCKOxCIORCHNxGFNg+DNA+RRBSTRRaTRhWURxaVSBaXSBaWShaWShaXSheYSxeYSheZ
        SxaaSxiZSxeZSxaZTBaaTBeZTRebTBebTBiaTBiaTBebTBebTBabSxebTBeaTBeZTBaZSxaaSxaZSxaZ
        SxaaSheaSxaZShaYSRaaSBaYSReXSBaYSBaXSBaYRhaWRxaVRhWVRhWURRWURBSURBSTQxSSQhOSQhOR
        QRKQQBGQPxKPPhGNPhCNPBCLPBGJOhCIOQ6HNxCFNg+ENA6AMg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>